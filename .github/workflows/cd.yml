# Define el nombre del flujo de trabajo
name: 'Continuous Delivery'

# Especifica cu치ndo se debe ejecutar el flujo de trabajo: en cada push a la rama "main"
on:
  push:
    branches:
      - main

# Define las variables de entorno
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Se obtiene del secret GCP_PROJECT_ID en GitHub
  SERVICE: challenge-api # Nombre del servicio Cloud Run
  REGION: southamerica-west1 # Regi칩n del servicio Cloud Run

# Define los trabajos que se ejecutar치n
jobs:
  deploy:
    name: Build and Push to GCP
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Obtener el c칩digo del repositorio
      - name: Checkout
        uses: actions/checkout@v2

      # Paso 2: Autenticarse en Google Cloud usando la clave de la cuenta de servicio
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Paso 3: Authentication with Docker
      - name: Docker Auth
        run: |-
          gcloud auth configure-docker --quiet

      # Paso 4: Construir y enviar el contenedor a Google Container Registry
      - name: Build and Push Container
        run: |-
          docker build -t "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest" ./
          docker push "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest"

      # Paso 5: Deploy in Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: gcr.io/${{ env.PROJECT_ID }}/challenge-api:latest

      # Paso 6: Mostrar la URL de salida de Cloud Run (si es necesario)
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
